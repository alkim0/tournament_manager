# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-23 01:37
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import tmdb.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Competitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127)),
                ('sex', tmdb.models.SexField(choices=[('F', 'Female'), ('M', 'Male')], max_length=1)),
                ('belt_rank', tmdb.models.BeltRankField(choices=[('WH', 'White'), ('YL', 'Yellow'), ('OR', 'Orange'), ('GR', 'Green'), ('BL', 'Blue'), ('PL', 'Purple'), ('BR', 'Brown'), ('RD', 'Red'), ('BK', 'Black')], max_length=2)),
                ('weight', tmdb.models.WeightField(blank=True, decimal_places=1, max_digits=4, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConfigurationSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.TextField(unique=True)),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sex', tmdb.models.SexField(choices=[('F', 'Female'), ('M', 'Male')], max_length=1)),
                ('skill_level', tmdb.models.DivisionLevelField(choices=[('A', 'A-team'), ('B', 'B-team'), ('C', 'C-team')], max_length=1)),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, unique=True)),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_doc_url', models.URLField(unique=True)),
                ('imported', models.BooleanField(default=False)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.School')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.SmallIntegerField()),
                ('slug', models.SlugField(unique=True)),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.Division')),
            ],
        ),
        migrations.CreateModel(
            name='TeamMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField()),
                ('round_num', models.SmallIntegerField()),
                ('round_slot', models.IntegerField()),
                ('ring_number', models.PositiveIntegerField(blank=True, null=True)),
                ('ring_assignment_time', models.DateTimeField(blank=True, null=True)),
                ('in_holding', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TeamRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seed', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('points', models.PositiveIntegerField(blank=True, null=True)),
                ('alternate1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alternate1', to='tmdb.Competitor')),
                ('alternate2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alternate2', to='tmdb.Competitor')),
                ('heavyweight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='heavyweight', to='tmdb.Competitor')),
                ('lightweight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lightweight', to='tmdb.Competitor')),
                ('middleweight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='middleweight', to='tmdb.Competitor')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.Team')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('location', models.CharField(max_length=127)),
                ('date', models.DateField()),
                ('registration_doc_url', models.URLField(unique=True)),
                ('imported', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentDivision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.Division')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.Tournament')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentDivisionBeltRanks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('belt_rank', tmdb.models.BeltRankField(choices=[('WH', 'White'), ('YL', 'Yellow'), ('OR', 'Orange'), ('GR', 'Green'), ('BL', 'Blue'), ('PL', 'Purple'), ('BR', 'Brown'), ('RD', 'Red'), ('BK', 'Black')], max_length=2)),
                ('tournament_division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.TournamentDivision')),
            ],
        ),
        migrations.AddField(
            model_name='teamregistration',
            name='tournament_division',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.TournamentDivision'),
        ),
        migrations.AddField(
            model_name='teammatch',
            name='blue_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blue_team', to='tmdb.TeamRegistration'),
        ),
        migrations.AddField(
            model_name='teammatch',
            name='division',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.TournamentDivision'),
        ),
        migrations.AddField(
            model_name='teammatch',
            name='red_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='red_team', to='tmdb.TeamRegistration'),
        ),
        migrations.AddField(
            model_name='teammatch',
            name='winning_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winning_team', to='tmdb.TeamRegistration'),
        ),
        migrations.AddField(
            model_name='team',
            name='registrations',
            field=models.ManyToManyField(through='tmdb.TeamRegistration', to='tmdb.TournamentDivision'),
        ),
        migrations.AddField(
            model_name='team',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.School'),
        ),
        migrations.AddField(
            model_name='schoolregistration',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.Tournament'),
        ),
        migrations.AddField(
            model_name='school',
            name='tournaments',
            field=models.ManyToManyField(through='tmdb.SchoolRegistration', to='tmdb.Tournament'),
        ),
        migrations.AddField(
            model_name='division',
            name='tournaments',
            field=models.ManyToManyField(through='tmdb.TournamentDivision', to='tmdb.Tournament'),
        ),
        migrations.AddField(
            model_name='competitor',
            name='registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tmdb.SchoolRegistration'),
        ),
        migrations.AlterUniqueTogether(
            name='tournamentdivision',
            unique_together=set([('tournament', 'division')]),
        ),
        migrations.AlterUniqueTogether(
            name='teamregistration',
            unique_together=set([('tournament_division', 'team'), ('tournament_division', 'seed')]),
        ),
        migrations.AlterUniqueTogether(
            name='teammatch',
            unique_together=set([('division', 'round_num', 'round_slot'), ('division', 'number')]),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together=set([('school', 'division', 'number')]),
        ),
        migrations.AlterUniqueTogether(
            name='schoolregistration',
            unique_together=set([('tournament', 'school')]),
        ),
        migrations.AlterUniqueTogether(
            name='division',
            unique_together=set([('sex', 'skill_level')]),
        ),
        migrations.AlterUniqueTogether(
            name='competitor',
            unique_together=set([('name', 'registration')]),
        ),
    ]
